{"version":3,"sources":["Pagination.js","components/List.js","components/ListContainer.js","Films.js","urls.js","People.js","Species.js","Vehicles.js","Planets.js","Starships.js","components/EntityLink.js","components/EntityCard.js","components/ContainerCard.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","handleNext","_this","props","onClick","nextPage","currentPage","handlePrev","prevPage","_this$props","this","react_default","a","createElement","className","Component","List","handleSortChange","handleSearchChange","_ref","target","list","title","type","id","onChange","htmlFor","map","element","key","url","Link","to","pathname","state","ListContainer","isSorted","searchString","compare","b","setState","prevState","value","fetchData","_callee","data","regenerator_default","wrap","_context","prev","next","fetch","sent","json","Object","objectSpread","stop","_this$state","previous","results","listToRender","slice","sort","filter","entity","toUpperCase","includes","console","log","components_List","src_Pagination","defaultProps","Films","ListContainer_ListContainer","People","Species","Vehicles","Planets","Starships","EntityLink","entityObject","_this$state$entityObj","name","EntityCard","listParametrs","Array","isArray","push","index","components_EntityLink","el","ContainerEntityCard","fetchFromUrlAndSetState","location","nextProps","components_EntityCard","App","BrowserRouter","Switch","Route","exact","path","component","render","ContainerCard","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b2e2c3b.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Pagination extends Component {\n    handleNext = () => {\n        this.props.onClick(this.props.nextPage, this.props.currentPage + 1)\n    }\n    handlePrev = () => {\n        this.props.onClick(this.props.prevPage, this.props.currentPage - 1)\n    }\n  render() {\n      const {currentPage, nextPage, prevPage} = this.props\n    return (\n      <div className=\"pagination\">\n        {prevPage ? <span onClick={this.handlePrev} className=\"pagination-next\">previous</span> : ''}\n        <span>{currentPage}</span>\n        {nextPage ? <span onClick={this.handleNext} className=\"pagination-next\">next</span> : ''}\n      </div>\n    )\n  }\n}\n\nexport default Pagination;","import React, { Component } from \"react\";\nimport {Link} from 'react-router-dom'\n\nclass List extends Component {\n  handleSortChange = () => {\n    this.props.handleSortChange()\n  }\n\n  handleSearchChange = ({target}) => {\n    this.props.handleSearchChange(target)\n  }\n  render() {\n    const { list, title } = this.props;\n    if (!list) {\n      return <h1>Loading...</h1>;\n    } else {\n      return (\n        <div>\n          <input type='checkbox' id='sort' onChange={this.handleSortChange}></input>\n          <label htmlFor='sort'>Sort</label>\n          <input type='text' id='search' onChange={this.handleSearchChange}></input>\n          <label htmlFor='search'>Search</label>\n          <ul>\n            {list.map(element => (\n              <li key={element.url}>\n                <Link to={{pathname: \"/entity\", state: {url: element.url}}}>{element[title]}</Link>\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\nimport Pagination from \"../Pagination.js\";\nimport List from \"./List.js\";\n\nexport default class ListContainer extends Component {\n  state = { isSorted: false, searchString: \"\" };\n  compare = (a, b) => {\n    const { title } = this.props;\n    return a[title] > b[title] ? 1 : a[title] < b[title] ? -1 : 0;\n  };\n  handleSortChange = () => {\n    this.setState(prevState => ({ isSorted: !prevState.isSorted }));\n  };\n  handleSearchChange = target => {\n    this.setState({ searchString: target.value });\n  };\n  componentDidMount() {\n    this.fetchData(this.props.url, 1);\n  }\n  fetchData = async (url, currentPage) => {\n    let data = await fetch(url);\n    data = await data.json();\n    this.setState({ ...data, currentPage });\n  };\n\n  render() {\n    const {\n      next,\n      previous,\n      currentPage,\n      results,\n      isSorted,\n      searchString\n    } = this.state;\n    const { title } = this.props;\n    let listToRender =\n      isSorted && results\n        ? results\n            .slice()\n            .sort(this.compare)\n            \n        : results;\n    listToRender = results && listToRender.filter(entity => entity[title].toUpperCase().includes(searchString.toUpperCase()))\n    console.log(\"results\", results);\n    return (\n      <div>\n        <List\n          list={listToRender}\n          title={title}\n          handleSortChange={this.handleSortChange}\n          handleSearchChange={this.handleSearchChange}\n        />\n        <Pagination\n          nextPage={next}\n          currentPage={currentPage}\n          prevPage={previous}\n          onClick={this.fetchData}\n        />\n      </div>\n    );\n  }\n}\n\nListContainer.defaultProps = {\n  title: \"name\"\n};\n","import React, { Component } from 'react'\nimport {FILMS_URL} from './urls'\nimport ListContainer from './components/ListContainer.js'\n\n class Films extends Component {\n     \n  render() {\n    return (\n      <div>\n        <h1>Films</h1>\n        <ListContainer url={FILMS_URL} title=\"title\"/>\n      </div>\n    )\n  }\n}\n\nexport default Films;","export const FILMS_URL = 'https://swapi.co/api/films'\nexport const PEOPLE_URL = 'https://swapi.co/api/people'\nexport const STARSHIPS_URL = 'https://swapi.co/api/starships'\nexport const PLANETS_URL = \"https://swapi.co/api/planets/\"\nexport const SPECIES_URL = \"https://swapi.co/api/species/\"\nexport const VEHICLES_URL = \"https://swapi.co/api/vehicles/\"\n","import React, { Component } from \"react\";\nimport { PEOPLE_URL } from \"./urls\";\nimport ListContainer from \"./components/ListContainer.js\";\n\nclass People extends Component {\n  render() {\n    return (\n      <div>\n        <h1>People</h1>\n        <ListContainer url={PEOPLE_URL} />\n      </div>\n    );\n  }\n}\n\nexport default People;\n","import React, { Component } from 'react'\nimport {SPECIES_URL} from './urls'\nimport ListContainer from './components/ListContainer'\n\n class Species extends Component {\n     \n  render() {\n    return (\n      <div>\n        <h1>Species</h1>\n        <ListContainer url={SPECIES_URL} />\n      </div>\n    )\n  }\n}\n\nexport default Species;","import React, { Component } from 'react'\nimport {VEHICLES_URL} from './urls'\nimport ListContainer from './components/ListContainer'\n\n class Vehicles extends Component {\n     \n  render() {\n    return (\n      <div>\n        <h1>Vehicles</h1>\n        <ListContainer url={VEHICLES_URL} />\n      </div>\n    )\n  }\n}\n\nexport default Vehicles;","import React, { Component } from 'react'\nimport {PLANETS_URL} from './urls'\nimport ListContainer from './components/ListContainer'\n\n class Planets extends Component {\n     \n  render() {\n    return (\n      <div>\n        <h1>Planets</h1>\n        <ListContainer url={PLANETS_URL} />\n      </div>\n    )\n  }\n}\n\nexport default Planets;","import React, { Component } from \"react\";\nimport { STARSHIPS_URL } from \"./urls\";\nimport ListContainer from \"./components/ListContainer\";\n\nclass Starships extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Starships</h1>\n        <ListContainer url={STARSHIPS_URL} title=\"name\"/>\n      </div>\n    );\n  }\n}\n\nexport default Starships;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass EntityLink extends Component {\n  state = { entityObject: {} };\n  async componentDidMount() {\n    const { url } = this.props;\n    let data = await fetch(url);\n    let entityObject = await data.json();\n    this.setState({ entityObject });\n  }\n  render() {\n    const { url } = this.props;\n    const { name, title } = this.state.entityObject;\n    return (\n      <Link to={{ pathname: \"/entity\", state: { url: url } }}>{name || title}</Link>\n    );\n  }\n}\n\nexport default EntityLink;\n","import React from \"react\";\nimport EntityLink from \"./EntityLink.js\";\n\nconst EntityCard = props => {\n  let listParametrs = [];\n  for (let key in props) {\n    if (Array.isArray(props[key])) {\n      listParametrs.push(\n        <div key={props[key]} className=\"entityList\">\n          {key}:\n          {props[key].map((url, index) => (\n          <EntityLink key={index} url={url}/>\n          ))}\n        </div>\n      );\n    } else if (key === \"homeworld\") {\n      listParametrs.push(\n        <div key={key}>\n          <EntityLink url={props[key]} />\n        </div>\n      );\n    } else {\n      listParametrs.push(\n        <div key={key}>\n          {key} : {props[key]}\n        </div>\n      );\n    }\n  }\n  return (\n    <div>\n      <h1>{props.name || props.title}</h1>\n      {listParametrs.map(el => el)}\n    </div>\n  );\n};\n\nexport default EntityCard;\n","import React, { Component } from \"react\";\nimport EntityCard from \"./EntityCard.js\";\n\nclass ContainerEntityCard extends Component {\n  state = {entityObject: {}};\n  fetchFromUrlAndSetState = async url => {\n    let data = await fetch(url);\n    let entityObject = await data.json();\n    this.setState({entityObject});\n  };\n  componentDidMount() {\n    const { url } = this.props.location.state;\n    this.fetchFromUrlAndSetState(url);\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.location.state.url !== this.props.location.state.url) {\n      this.fetchFromUrlAndSetState(nextProps.location.state.url);\n    }\n  }\n  render() {\n    return <EntityCard {...this.state.entityObject} />;\n  }\n}\n\nexport default ContainerEntityCard;\n","import React, { Component } from \"react\";\nimport Films from \"./Films\";\nimport People from \"./People\";\nimport Species from \"./Species\";\nimport Vehicles from \"./Vehicles\";\nimport Planets from \"./Planets\";\nimport \"./App.css\";\nimport Starships from \"./Starships\";\nimport { Route, BrowserRouter as Router, Switch, Link } from \"react-router-dom\";\nimport ContainerEntityCard from \"./components/ContainerCard.js\";\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"links\">\n            <Link to=\"/films\">films</Link>\n            <Link to=\"/planets\">planets</Link>\n            <Link to=\"/people\">people</Link>\n            <Link to=\"/starships\">starships</Link>\n            <Link to=\"/vehicles\">vehicles</Link>\n            <Link to=\"/species\">species</Link>\n          </div>\n          <div className=\"tabs\">\n            <Switch className=\"tabs\">\n              <Route exact path=\"/films\" component={Films} />\n              <Route exact path=\"/planets\" component={Planets} />\n              <Route exact path=\"/people\" component={People} />\n              <Route exact path=\"/starships\" component={Starships} />\n              <Route exact path=\"/species\" component={Species} />\n              <Route exact path=\"/vehicles\" component={Vehicles} />\n              <Route\n                exact\n                path=\"/entity\"\n                render={props => <ContainerEntityCard {...props} />}\n              />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}